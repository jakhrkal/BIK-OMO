<?xml version="1.0" encoding="UTF-8"?>
<!-- pokud jako ucitel mate server users.fit.cvut.cz, pouzijte nize uvedeny odkaz -->
<!-- <?xml-stylesheet type="text/xsl" href="https://users.fit.cvut.cz/~ryantiva/bi-omo/sprojekt/sprojekt_html.xsl"?> -->
<!-- pokud jste student a mate server webdev.fit.cvut.cz, odkomentujte nasledujici radek a zakomentujte ten predchozi -->
<!--<?xml-stylesheet type="text/xsl" href="https://webdev.fit.cvut.cz/~rybolzde/bi-omo/sprojekt/sprojekt_html.xsl"?>-->
<!-- pokud odevzdavate semestralku pres progtest, pouzijte nize uvedeny odkaz -->
<?xml-stylesheet type="text/xsl" href="sprojekt_html.xsl"?>
<!--<!DOCTYPE sproject PUBLIC "-//XMLmind//DTD Sprojekt//EN" "https://webdev.fit.cvut.cz/~rybolzde/bi-omo/sprojekt/sprojekt.dtd">-->
<!--<!DOCTYPE sproject PUBLIC "-//XMLmind//DTD Sprojekt//EN" "sprojekt.dtd">-->
<sproject>
  <course>
    <cname>Objektové modelování</cname>

    <code>BIK-OMO</code>

    <semester>Zimní semestr 2015/2016</semester>

    <seminar>BIK</seminar>
  </course>

  <author1>
    <aname>Jakub Hrkal</aname>

    <uname>hrkaljak</uname>

    <email>hrkaljak@fit.cvut.cz</email>
  </author1>
  <author2>
    <aname>Zdeněk Váňa</aname>

    <uname>vanazde1</uname>

    <email>vanazde1@fit.cvut.cz</email>
  </author2>

  <content>
    <declaration>Prohlašujeme, že jsme svou semestrální práci vypracovali
    samostatně. Všechny zdroje, ze kterých jsme čerpali, jsou uvedeny v části
    Odkazy.</declaration>

    <title>Střelnice a prodejna zbraní</title>

    <problem_statement>
        <para>Majiteli střelnice a prodejny zbraní Ostrostřelec vadí že se neví jaké zboží kdy prodal kterému zákazníkovi. Zadavatel potřebuje mít přehled i o tom, kteří zaměstnanci vyřizují jaké objednávky. Zapisovat všechny tyto informace do Excelu již přestává být přehledné.</para>
        <para>Proto je vyžadován návrh a implementace nového systému, který umožní efektivní správu uvedených informací.</para>

      <comment>
        <para>Tohle je komentář k 1. odstavci popisu semestrální práce.</para>

        <para>Prvotní popis problému (problem statement) je první pokus o vymezení problému, který
        jsme získali od zadavatele. Vyjadřuje, co komu vadí nebo chybí. Musí z něj být zřejmé, že 
        zadavatel pociťuje současný stav jako problém a že si dovede představit stav lepší, 
        o který má zájem. Necítí-li zadavatel problém nebo nemá-li zájem o řešení problému, 
        nemáme co řešit.</para>
      </comment>
    </problem_statement>

    <problem_domain>
    zamestnanci, ruzne pobocky, informace zadavaji zamci, v systému sledujeme registrované zákazníky - se zbrojním pasem
      <para>Firma Ostrostřelec má několik poboček, každá pobočka má obchod se zbraněmi a střelnici.</para>
      
      <para>Požadovaný systém musí obsahovat databázi zaměstnanců - u každého prodeje musí být dohledatelné kdo zboží vydal.</para>
      
      <para>IS bude dále umožňovat registraci zákazníků. Ostrostřelec umožňuje registraci jen držitelům zbrojího pasu a na základě registrace nabízí svým věrným zákazníkům řadu facinujících výhod jako slevu až 0.5 % při nákupu nad 100 000 Kč, zasílní e-mailových novinek, nebo poskytnutí osobních údajů zákayníka ke spracování smluvním třetím stranám.</para>
      
      <para>Zboží lze buď objednat na e-shopu nebo zakoupit přímo na pobočce. Obchod prodává střelné zbraně, náboje i řadu doplňků jako pouzdra, brýle, klapky na uši apod. Střelnice má typicky více kójí a na střelnici je vždy třeba udělat si rezervaci. Rezervaci si může udělat jen registrovaný zákazník, může si rezervovat i více střeleckých kójí.</para>

      <comment>
        <para>Tohle je komentář k 2. odstavci popisu semestrální práce.</para>

        <para>Popis problémové domény má vylíčit, jak vypadá prostředí, kde
        máme řešit problém - kdo (nebo co v případě čidel a různých automatických zařízení) bude
        interagovat s požadovaným systémem, k čemu která interakce slouží (jaké role má hrát 
        požadovaný systém v prostředí), kdo komu sděluje jaké informace (zejména jaké informace
        bude dostávat požadovaný systém a jaké informace musí poskytovat svým uživatelům). Snažíme se zachytit
        klíčové procesy a činnosti, které v prostředí probíhají.
        V popisu problémové domény se snažíme popsat realitu - jaké objekty se tu vyskytují, jaké mají
        vlastnosti a vztahy mezi sebou. Pokud je nutné dodržovat nějaká pravidla, tak je vysvětlete také zde.</para>
        
        <para>Popis problémové domény je hlavním zdrojem informací pro následné vytvoření strukturálního konceptuálního modelu OntoUML.</para>
      </comment>
    </problem_domain>

    <purpose>  
      <para>Management společnosti potřebuje systém pro efektivní správu zdrojů a uskutečněných prodejů.</para>
      
      <comment>
        <para>Cílem účelu je jasně definovat, jaký je hlavní cíl aplikace, co je jejím hlavním účelem a přínosem.</para>
      </comment>
    </purpose>

    <functions>
      <function>
        Systém umožňuje vyhledat zbraně prodané určitému zákazníkovi.
      </function>
      <function>
        Systém umožňuje vyhledat zbraně prodané určitým zaměstnancem.
      </function>      
      <function>
        Systém umožňuje vyhledat pobočky, kde je aktuálně volno na střelnici a zobrazit kolik míst je volných na které pobočce.
      </function>
      <function>
        Systém umožňuje určit konečnou cenu zboží pro zákazníka na základě daných parametrů (věrnostní, množstevní slevy, akce...)
      </function>
      <comment>
        <para>Klíčové funkce určují, co má systém dělat, aby naplnil svůj účel. Výčet funkcí je podrobné zadání úlohy, které vznikne rozborem problému, prostředí a účelu. Jedná se vlastně o výčet funkčních požadavků na systém. Z těchto klíčových funkcí vychází mimo jiné dotazy, kterými ověříme, že systém plní svou funkci.</para>
      </comment>
    </functions>

    <rules>
      <rule>Každému zaměstnanci i zákazníkovi musí být alespoň 18 let.</rule>
      <rule>Každý registrovaný zákazník musí vlastnit zbrojní pas.</rule>
      <rule>Prodat lze jen takové zboží, které máme alespoň jednou na skladě.</rule>
      <comment>
        <para>Pravidla a omezení určují, jaké podmínky mají být v systému průběžně splněné, aby mohl správně  fungovat. 
        Splnění pravidel se má kontrolovat vždy, když na splnění pravidel záleží (např. před vykonáním funkce, která splnění pravidla předpokládá, jinak může vést např. k nesprávným výsledkům).</para>
        <para>V rámci semestrální práce je povinné definovat alespoň 3 pravidla. Musí se jednat o netriviální pravidla, kde je nutné uplatnit složitější navigaci nebo logiku. Pravidla musí mít smysl vůči účelu systému.</para>
        <para>Mezi pravidla se nepočítají omezení daná modelem - tedy násobnosti vazeb, apod. I ta ale samozřejmě musí být splněna, aby aplikace fungovala správně podle požadavků.</para>
      </comment>
    </rules>

    <queries>
      <query>
        Najdi všechny střelné zbraně prodané zákazníkovi jménem "Štěpán Střelený".
      </query>
      <query>
        Najdi všechny zákazníky kteří si alespoň jednou byli zastřílet na střelnicích se vzdáleností 50 metrů.
      </query>
      <query>
        Najdi všechny objednávky vyřízené zaměstnancem jménem "Norbert Netrefil".
      </query>
      <query>
        Za kolik peněz u nás celkem nakoupil pan "Kamil Kohoutek"?
      </query>
      <comment>
        <para>Dotazy slouží k demonstraci správné funkčnosti klíčových funkcí systému. Pomocí těchto dotazů ukážeme,
        že náš systém umí splnit všechny požadavky, které na něj byly kladeny. Musí tedy vycházet z klíčových funkcí a účelu systému.</para>
        <para>V rámci semestrální práce je povinné definovat alespoň 3 takové dotazy. Dotazy musí být netriviální a musí vyžadovat složitejší navigaci nebo logiku.</para>
      </comment>
    </queries>

    <description>
      <comment>
        <para>S T R U K T U R A    S E M E S T R Á L N Í    P R Á C E  
  Semestrálka má tyto části: 
            - hlavička (údaje o vás a o čase cvičení, prohlášení o autorství, název práce)
            - prvotní popis problému
            - popis problémové domény
            - účel požadovaného systému (stručně, pokud možno jednou větou)
            - seznam funkcí klíčových k naplnění účelu
            - seznam pravidel a omezení, která musí být splněna pro správnou funkci systému a pro splnění jeho účelu
            - seznam dotazů, které demonstrují správnou funkčnost systému a schopnost splnit jeho účel
            - rozbor zadání (nepovinný): detailnější rozbor problému a problémové domény, stanovení klíčových pojmů a definice jejich významů,
              určení synonym, apod., určení způsobu, jakým se autor rozhodl řešit jaké problémy
            - strukturální konceptuální model OntoUML
                - diagram konceptuálního modelu OntoUML
                - diskuze ke konceptuálnímu modelu
                - tabulka použití konceptů OntoUML v modelu
            - strukturální implementační model UML
                - diagram objektového implementačního modelu
                - diskuse k implementačnímu modelu
            - implementace
                - odkaz na Smalltalk package s implementací prototypu systému
                - diskuze k implementaci
                - tabulka použití implementačních objektových technik
            - verifikace splnění zadání
                - odkaz na Smalltalk package s automatickými testy
                - tabulka popisující automatické testy
            - závěrečná diskuse
            - odkazy na použité zdroje
            - ke xml-dokumentu přiložte dva zdrojové soubory:
                - zdroják ST package semestrálky. Package pojmenujte login-nazev_semestralky a stejně i soubor.
                - zdroják ST package testů semestrálky. Package pojmenujte login-nazev-tests a stejně i soubor. Testy musí pokrývat
                    - funkčnost složitějších metod
                    - dotazy
                    - pravidla
                    - testovány musí být pozitivní i negativní scénáře (kdy má test selhat), příp. test musí být koncipován na úplnou shodu (viz např. testQueryStudentStudies)
                    - všechny testy musí být "zelené"!
    

  Všechny části semestrální práce jsou povinné kromě těch,
  které jsou výslovně označeny jako nepovinné.</para>
      </comment>
  

    </description>

    <conceptual_model>
       <cm_picture>
        <mediaobject>
          <imageobject>
            <imagedata fileref="semestralka2.png" />
          </imageobject>
        </mediaobject>
      </cm_picture>

      <comment>
        <para>Požadavky na návrh konceptuálního modelu tříd:</para>

        <para>Jedná se o konceptuální model - v pojmech problémové domény. Do modelu nekreslete, 
        jakým způsobem chcete implementovat asociace mezi objekty, ani směry navigace. Do 
        tříd vyplňte seznam atributů a metod (v ukázce jsou tyto nekompletní!). U asociací
        uvádějte násobnosti a názvy. Vše v návrhu musí k něčemu konkrétnímu sloužit, každý údaj
        musí být použit v některém dotazu nebo pravidle, vše musíte umět pragmaticky zdůvodnit.
        Jinými slovy, model má obsahovat pouze to, co je třeba ke splnění účelu.</para>
        
        <para>V modelu využijte koncepty OntoUML dle své volby. Za správné použití každého konceptu
        získáte patřičný počet bodů.</para>
        
        <para>Konceptuální model vytvářejte v anglickém jazyce, následnou diskuzi můžete provést v českém jazyce.
        Cílem diskuze je vysvětlit význam složitejších konstrukcí a vazeb, aby čtenář model správně pochopil.</para>
      </comment>

      <cm_discussion>
          <para>
            Protože zákazníci i zaměstnanci jsou lidé, zvolil jsem jako Kind poskytující identitu třídu Person. Třída může vystupovat ve 2 rolích - Customer a Emmployee, protože osoba může být současně zákazníkem i zaměstancem. Zákazník může navíc patřit do kolektivu VIP členů - VIPMembers
          </para>
          <para>
            Objednávky - Order jsou modelovány jako Relator. Objednávku může zadávat jak zaměstnanec (např. objedná zákazníkovi zboží které zrovna nemá skladem) nebo přímo zákazník (např. v e-shopu). Objednávat lze dva druhy produktů: střelnici a zboží (zbraně). Objednávka vždy prochází dvěma fázemi - Ordered a Paid.
          </para>
          <para>
          	Střelnice jsou modelovány ve třídě ShootingGallery a provádí se na ně rezervace pomocí třídy GalleryReservation. Každá rezervace je částečně definovaná i termínem na kdy je rezervováno, má tedy essential part Term.
          </para>
          <para>
            Category Goods popisuje zboží a má několik Kinds - Weapon, Ammunition. K tomu sledujeme dostupnost každého zboží pomocí modu Availability.
          </para>
          <para>
          Třída zbraň (Weapon) se pak dělí na podtřídy bodná zbraň (StabWeapon) a střelná zbraň (Gun), u níž ještě dále sledujeme z jakých součástek se skládá (zásobník, rukojeť, hlaveň), z nichž některé jsou essential, některé inseparable, tak, jak ukázala analýza u klienta.
          </para>
      </cm_discussion>
      
      <cm_concepts>
        <cm_concept>
          <name>Kind</name>
          <usages>
            <usage>
              <class>Person, Weapon, Gallery reservation</class>
              <relation>-</relation>
            </usage>
          </usages>
        </cm_concept>
        <cm_concept>
          <name>Subkind</name>
          <usages>
            <usage>
              <class>StabWeapon, Gun</class>
              <relation>-</relation>
            </usage>
          </usages>
        </cm_concept>
        <cm_concept>
          <name>Role</name>
          <usages>
            <usage>
              <class>Customer</class>
              <relation>Person - Order</relation>
              <comment>Zákazník je osoba která si objednává.</comment>
            </usage>
            <usage>
              <class>Employee</class>
              <relation>Person - Order</relation>
              <comment>Zaměstnanec je osoba vyřizující objednávku.</comment>
            </usage>
          </usages>
        </cm_concept>
        <cm_concept>
          <name>Phase</name>
          <usages>
            <usage>
              <class>Ordered, Paid</class>
              <relation>Order</relation>
              <comment>Objednávka může být teprve objednaná nebo už zaplacená.</comment>
            </usage>
          </usages>
        </cm_concept>
        <cm_concept>
          <name>Category</name>
          <usages>
            <usage>
              <class>Goods</class>
              <relation>-</relation>
            </usage>
          </usages>
        </cm_concept>
        <cm_concept>
          <name>RoleMixin</name>
          <usages>
            <usage>
              <class>OrderingPerson</class>
              <relation>-</relation>
              <comment>Objednávku může zadávat zaměstnanec i zákazník.</comment>
            </usage>
          </usages>
        </cm_concept>
        <cm_concept>
          <name>Mixin</name>
          <usages>
            <usage>
              <class>FreeVisitGallery</class>
              <relation>-</relation>
            </usage>
          </usages>
        </cm_concept>
        <cm_concept>
          <name>Whole</name>
          <usages>
            <usage>
              <class>Gun</class>
              <relation>Barrel, Grip, FiringPin, Magazine</relation>
              <comment>Střelná zbraň se skládá z hlavně, rukojeti, úderníku a zásobníku.</comment>
            </usage>
          </usages>
        </cm_concept>
        <cm_concept>
          <name>Part</name>
          <usages>
            <usage>
              <class>Barrel, Grip, FiringPin, Magazine</class>
              <relation>Gun</relation>
              <comment>Zadavatel zakázky specifikoval, že jediná neoddělitelná část střelné zbraně je hlaveň, všechno ostatní lze vyměnit; stejně tak jako že zbraň je zbraní na základě toho, že má hlaveň a zásobník.</comment>
            </usage>
          </usages>
        </cm_concept>
        <cm_concept>
          <name>Quantity</name>
          <usages>
            <usage>
              <class>Plastic</class>
              <relation>-</relation>
            </usage>
          </usages>
        </cm_concept>
        <cm_concept>
          <name>Collective</name>
          <usages>
            <usage>
              <class>VIPMembers</class>
              <relation>Customer</relation>
              <comment>Zákazníci mohou patřit mezi VIP klientelu.</comment>
            </usage>
          </usages>
        </cm_concept>
        <cm_concept>
          <name>Quality</name>
        </cm_concept>
        <cm_concept>
          <name>Mode</name>
          <usages>
            <usage>
              <class>Availibility</class>
              <relation>Goods</relation>
            </usage>
          </usages>
        </cm_concept>
        <cm_concept>
          <name>Relator</name>
          <usages>
            <usage>
              <class>Order</class>
              <relation>OrderingPerson - Goods</relation>
              <comment>Objednávající osoba si objednává v určitý čas, za určitou celkovou částku zboží...</comment>
            </usage>
            <usage>
            	<class>Order</class>
            	<relation>OrderingPerson - GalleryReservation</relation>
            	<comment>...nebo čas na střelnici.</comment>
            </usage>
          </usages>
        </cm_concept>
        <cm_concept>
          <name>Formal</name>
        </cm_concept>
         
        <comment>
          <para>V tabulce konceptuálních konceptů zaznamenejte, jaké koncepty OntoUML modelu jste ve své semestrální práci použili a kde.
          Vyjmenujte pouze ty zástupce, kteří se podílejí na bodovém hodnocení. Za každý správně použitý koncept
          získáte body do hodnocení konceptuální části semestrální práce. Ohodnocení jednotlivých konceptů najdete na eduxu.</para>
        </comment>
      </cm_concepts>
      
    </conceptual_model>
    
    <implementation_model>
       <im_picture>
        <mediaobject>
          <imageobject>
            <imagedata fileref="semestralka3_impl.png" />
          </imageobject>
        </mediaobject>
      </im_picture>



      <comment>
        <para>Požadavky na implementační model tříd:</para>

        <para>Jedná se o objektový implementační model UML, který definuje způsob implementace jednotlivých konceptů konceptuálního modelu OntoUML v čistém
        objektovém modelu s pomocí tříd, atributů, skládání, dědění a kolekcí.</para>
        
        <para>V modelu by měly být navrženy vhodné realizace jednotlivých konceptů, vhodně navržené směry
        navigace vazeb vzhledem k dotazům a pravidlům.</para>
        
        <para>V implementačním modelu používejte takové názvy, které jsou použity v následné implementace. Jedná se o textové a grafické znázornění reálné implementace.</para>
      </comment>

      <im_discussion>
        <para>Koncept X jsem implementoval jako Y protože ...
          Zvolil jsem směr navigace od H k I, protože je požadován dotaz D.
          Asociaci V-W jsem realizoval pomocí tzv. "brusle", protože bude třeba efektivně provádět dotazy z obou stran.
          ...
        </para>
      </im_discussion>
    </implementation_model>

    <implementation>
      <package>
        <file fileref="hrkaljak-vanazde1-strelnice.st" />
      </package>
      <impl_discussion>
        <para>Implementace obsahuje 23 tříd a 18 testů.
        </para>
        <para>Požadavky 1, 2 a 3 jsme splinili umožněním navigace z kolekce zákazníků / zaměstnanců na objednávky a z objednávek na zboží a střelnice. O výpočet ceny z požadavku 4 se stará metoda totalPrice třídy OrderRelator.
        </para>
        
        <comment>
          <para>V tomto místě by měla být popsána implementace navrženého modelu -- způsob řešení dotazů a pravidel, implementace
          programové logiky.</para>
        </comment>
      </impl_discussion>
      
      <impl_concepts>
        <impl_concept>
          <name>Enforcing of multiplicity 1 (arrow side)</name>
          <usages>
            <usage>
              <class>Gun</class>
              <method>#initialise (barrel, grip, firingPin)</method>
            </usage>
            <usage>
                <comment>(1 point total)</comment>
            </usage>
          </usages>
        </impl_concept>
        <impl_concept>
        <name>Checking source multiplicity</name>
          <usages>
            <usage>
              <class>Gun</class>
              <method>test #testMultiplicityGunParts</method>
            </usage>
            <usage>
                <comment>(1 point total)</comment>
            </usage>
          </usages>
        </impl_concept>
        <impl_concept>
          <name>Collection operations</name>
          <usages>
            <usage>
              <class>TestingSem2</class>
              <method>#getCustByName</method>
              <comment>#detect:</comment>
            </usage>
            <usage>
              <class>OrderRelator</class>
              <method>#totalPrice:</method>
              <comment>#inject:into:</comment>
            </usage>
            <usage>
              <class>TestingSem2</class>
              <method>#testD1:</method>
              <comment>#flatCollect:</comment>
            </usage>
            <usage>
              <comment>(3 points total: #detect:, #flatCollect, #inject:into:)</comment>
            </usage>
          </usages>
        </impl_concept>
        <impl_concept>
          <name>Extending super</name>
          <usages>
            <usage>
              <class>Weapon</class>
              <method>#initialize</method>
            </usage>
            <usage>
              <comment>(1 point total)</comment>
          </usage>
        </usages>
        </impl_concept>
        <impl_concept>
          <name>Constant method</name>
          <usages>
            <usage>
              <class>EmployeesRole</class>
              <method>#bonuses</method>
            </usage>
            <usage>
              <comment>(1 point total)</comment>
          </usage>
        </usages>
        </impl_concept>
        <impl_concept>
          <name>Lazy initialization</name>
          <usages>
            <usage>
              <class>OrderRelator</class>
              <method>#goods, #reservations</method>
              <comment>Collections initialization</comment>
            </usage>
            <usage>
              <class>CustomerRole</class>
              <method>#registrationDate</method>
              <comment>Default value initialization (Date today)</comment>
            </usage>
            <usage>
                <comment>(2 points total)</comment>
            </usage>
          </usages>
        </impl_concept>

        <comment>
          <para>V tabulce konceptů zaznamenejte, které koncepty objektového programování jste ve své semestrální práci použili, kde a jakým způsobem.
          Není třeba vyjmenovat všechny výskyty, stačí vyjmenovat zástupce, za které je udělováno hodnoceni.
          Pokud uvedete výskyty navíc, získáte tím "rezervu" pro případ, že některý z nich jste použili chybně.
          Za každý správně použitý koncept získáte body do hodnocení implementační části semestrální práce.</para>
          
          <para>Ohodnocení jednotlivých konceptů najdete na eduxu. Každý použitý koncept musí mít smysl vzhledem k zadání a účelu systému.</para>
      </comment>
      </impl_concepts>
    </implementation>
    
    <verification>
      <package>
        <file fileref="hrkaljak-vanazde1-strelnice-testy.st" />
      </package>
      <unit_tests>
        <unit_test>
          <name>#testD1</name>
          <target>D1</target>
          <description>Testovací scénáře pro dotazy a pravidla jsou označeny přímo v ST projektu. Ze jména UC by mělo být jasné co testuje.</description>
        </unit_test>        
        <comment>
          <para>V tabulce unit testů vyjmenujte jednotlivé testy, které jste implementovali pro ověření správné funkčnosti aplikace - tedy
          implementaci jednotlivých stanovených dotazů, pravidel a omezení. 
          Ostatní testy (zde např. #testSalaryPolymorphism) nemusíte zde uvádět, je však třeba v kódu zdokumentovat jejich význam.
          JE NUTNÉ TESTY POKRÝT VŠECHNY DOTAZY A PRAVIDLA a též složitější pomocné funkčnosti, příp. výpočty.</para>
        </comment>
      </unit_tests>
    
    </verification>

    <conclusions>
      <title>Závěr</title>

      <para>Navržený a implementovaný systém splňuje zadané požadavky, podporuje všechny poptávané dotazy.</para>

      <para>Za velkou přednost své semestrálky považuji, že se mi podařilo nahlédnout princip UML modelovaní a naučit se základy dalšího programovacího jazyka.</para>
      
      <comment>
        <para>V závěru se pokuste shrnout, co si z realizace práce odnášíte. Jak se vám podařilo dosáhnout požadavků, apod.</para>
      </comment>
    </conclusions>

    <references>
      <title>Odkazy</title>
      <comment>
        <para>Do odkazů uveďte všechny zdroje, ze kterých jste čerpali při realizaci vaší práce.</para>
      </comment>

      <comment>
        <para>A bude-li to třeba, můžete komentovat také odkazy.</para>
      </comment>
      
      <para>[1] Přednášky BIK-OMO a materiály na Eduxu. Dostupné z WWW <link url="http://stephane.ducasse.free.fr/FreeBooks/BlueBook/">http://stephane.ducasse.free.fr/FreeBooks/BlueBook/</link> (navštíveno 8.10.2011)</para>
    </references>
  </content>
</sproject>
